import requests
import json
from googletrans import Translator
from datetime import datetime
from datetime import timedelta
from config import cookies, headers, params
from data_base import read_to_table


translator = Translator()

weather_dict = {
    '–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å': 'üåß',
    '–¥–æ–∂–¥—å': 'üåß',
    '–ø–∞—Å–º—É—Ä–Ω–∞—è –ø–æ–≥–æ–¥–∞': '‚òÅÔ∏è',
    '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
    '—Å–Ω–µ–≥': '‚ùÑ',
    '—è—Å–Ω–æ': '‚òÄ'
}


def write_to_json(information, filename):
    with open(f'weather data/{filename}.json', 'w') as file:
        json.dump(information, file, indent=4, ensure_ascii=False)


def read_to_json(filename):
    with open(f'weather data/{filename}.json', 'r') as file:
        json.loads(file)


# –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
# def params_config(lat, lon):
#     global params
#     params = {
#     'lat': '45.00975',
#     'lon': '39.099838',
#     'page': 'main',
#     'day': '',
#     'ta_features': 'favorites;sgn',
#     'turboapp': '1',
# }
    
    
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º json —Ñ–∞–π–ª 
def response_weather(id_users):
    global lat, lon
    lat, lon = read_to_table(id_users)
    
    response = requests.get('https://yandex.ru/pogoda/', params=params, cookies=cookies, headers=headers)
    print(f'–°—Ç–∞—Ç—É—Å –∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}')
    global response_result_later, response_result_now
    if response.status_code == 200:
        response_json = response.json()
        response_result_now = response_json.get('data').get('fact')
        response_result_later = response_json.get('data').get('forecasts')
        write_to_json(response_result_now, '1_now_information')
        write_to_json(response_result_later, '2_later_information')
    else:
        print(f'–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ —Å —Å–∞–π—Ç–∞ü§í')
        response_result_now = read_to_json('1_now_information')
        response_result_later = read_to_json('1_now_information')
        
        
# –ø–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
def validator_emodji(condition):
    global emodji_weather
    try:
        emodji_weather = weather_dict[condition]
    except:
        emodji_weather = ''


# —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–µ–≥–æ–¥–Ω—è
def get_weather_now(id_users):
    # write_to_json(response_result, '1_all_information')
    # print(response_result.get('condition'))
    response_weather(id_users)

    condition = translator.translate(response_result_now.get('condition'), dest='ru').text
    if condition =='–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π':
        condition = '—è—Å–Ω–æ'
    validator_emodji(condition)
    return f'–°–µ–π—á–∞—ÅüóìÔ∏è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞üå°: {response_result_now.get('temp')}‚ÑÉ\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {condition} {emodji_weather}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞üíß: {response_result_now.get('pressure_mm')} –≥/–º¬≥\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üí®: {response_result_now.get('wind_speed')} –º/—Å'


# —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞–≤—Ç—Ä–∞
def get_weather_tomorrow(id_users):  
    response_result = response_weather(id_users)

    condition = translator.translate(response_result_later[1].get('parts').get('day').get('condition'), dest='ru').text
    if condition =='–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π':
        condition = '—è—Å–Ω–æ'
    validator_emodji(condition)

    date_now = datetime.now()
    date_tomorrow = date_now + timedelta(days=1)
    return f'–ó–∞–≤—Ç—Ä–∞üóìÔ∏è: {date_tomorrow.strftime('%d.%m.%Y')}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞üå°: {response_result_later[1].get('parts').get('day').get('temp_avg')}‚ÑÉ\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {condition} {emodji_weather}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞üíß: {response_result_later[1].get('parts').get('day').get('pressure_mm')} –≥/–º¬≥\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üí®: {response_result_later[1].get('parts').get('day').get('wind_speed')} –º/—Å'


# —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 10 –¥–Ω–µ–π
def get_weather(id_users):
    response_result = response_weather(id_users)

    condition = translator.translate(response_result_later[1].get('parts').get('day').get('condition'), dest='ru').text
    if condition =='–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π':
            condition = '—è—Å–Ω–æ'
    validator_emodji(condition)

    date_now = datetime.now()
    result_weather = f'–î–∞—Ç–∞üóìÔ∏è: {date_now.strftime('%d.%m.%Y')}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞üå°: {response_result_later[0].get('parts').get('day').get('temp_avg')}‚ÑÉ\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {condition} {emodji_weather}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞üíß: {response_result_later[0].get('parts').get('day').get('pressure_mm')} –≥/–º¬≥\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üí®: {response_result_later[0].get('parts').get('day').get('wind_speed')} –º/—Å\n\n\n'
    for i in range(1, 10):
        condition = translator.translate(response_result_later[i].get('parts').get('day').get('condition'), dest='ru').text
        if condition =='–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π':
            condition = '—è—Å–Ω–æ'
        validator_emodji(condition)

        
        date_of_the_week = date_now + timedelta(days=i)
        result_weather += f'–î–∞—Ç–∞üóìÔ∏è: {date_of_the_week.strftime('%d.%m.%Y')}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞üå°: {response_result_later[i].get('parts').get('day').get('temp_avg')}‚ÑÉ\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {condition} {emodji_weather}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞üíß: {response_result_later[i].get('parts').get('day').get('pressure_mm')} –≥/–º¬≥\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üí®: {response_result_later[i].get('parts').get('day').get('wind_speed')} –º/—Å\n\n\n'
    return result_weather


def main():
    get_weather_now(135246)
    # get_weather_tomorrow()
    # get_weather()

if __name__ == '__main__':
    main()
