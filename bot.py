import asyncio
import logging

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

from config import BOT_TOKEN
from get_weather import get_weather, get_weather_now, get_weather_tomorrow
from data_base import write_to_table, read_to_table


kb = [
    [types.KeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É‚õÖ')],
    [types.KeyboardButton(text="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –±–æ—Ç—Éüóí")]
      ]

kb_interval = [
        [types.KeyboardButton(text='–°–µ–≥–æ–¥–Ω—è'),
         types.KeyboardButton(text='–ó–∞–≤—Ç—Ä–∞')],
        [types.KeyboardButton(text='10 –¥–Ω–µ–π')]
        ]


dp = Dispatcher()


@dp.message(CommandStart())
@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å‚ùì',reply_markup=keyboard)


@dp.message(Command('help'))
@dp.message(F.text == '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –±–æ—Ç—Éüóí')
async def help_bot(message: Message):
    await message.answer(f'–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n'
                          '–æ –ø–æ–≥–æ–¥–µ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ üó∫Ô∏è\n'
                          '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n'
                          '–≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n'
                          '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n'
                          '—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç /location\n\n'
                          '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã —Å —Å–∞–π—Ç–∞ —è–Ω–¥–µ–∫—Å –ø–æ–≥–æ–¥–∞\n'
                          'https://yandex.ru/pogoda/', reply_markup=types.ReplyKeyboardRemove())


@dp.message(Command("weather"))
@dp.message(F.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É‚õÖ')
async def weather_in_city(message: Message):
    keybord = types.ReplyKeyboardMarkup(keyboard=kb_interval, resize_keyboard=True)
    await message.answer('–ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏üïë', reply_markup=keybord)


@dp.message(F.text == '–°–µ–≥–æ–¥–Ω—è')
async def time_interval(message: Message):
    text = get_weather_now(message.from_user.id)
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())


@dp.message(F.text == '–ó–∞–≤—Ç—Ä–∞')
async def time_interval(message: Message):
    text = get_weather_tomorrow(message.from_user.id)
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())


@dp.message(F.text == '10 –¥–Ω–µ–π')
async def time_interval(message: Message):
    text = get_weather(message.from_user.id)
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())


@dp.message(Command('location'))
async def location_users(message: Message):
    kb_location = [[types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüìç", request_location=True)]]
    keybord = types.ReplyKeyboardMarkup(keyboard=kb_location, resize_keyboard=True)
    # read_to_table(message.from_user.id)
    await message.answer('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º‚ùì', reply_markup=keybord)


@dp.message()
async def handler_location(message: Message):
    lat = message.location.latitude     # —à–∏—Ä–æ—Ç–∞
    lon = message.location.longitude    # –¥–æ–ª–≥–æ—Ç–∞
    id = message.from_user.id
    name = message.from_user.full_name
    # name = 1
    write_to_table(id, lat, lon, name)
    await message.answer('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    bot = Bot(token=BOT_TOKEN)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
